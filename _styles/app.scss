// Note: @use rules must be written before any other rules (@tailwind, @layer, etc.)
@use 'variables' as *;
@use 'core';
@use 'components';
@use 'templates';

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --layout-vertical-padding: 60px;

    @media (min-width: $bp-md) {
      --layout-vertical-padding: 100px;
    }
    
    & {
      // Uncomment as needed
      // --ease-in-power1: cubic-bezier(.55, .085, .68, .53);
      // --ease-out-power1: cubic-bezier(.25, .46, .45, .94);
      // --ease-in-out-power1: cubic-bezier(.455, .03, .515, .955);
      // --ease-in-power2: cubic-bezier(.55, .055, .675, .19);
      // --ease-out-power2: cubic-bezier(.215, .61, .355, 1);
      // --ease-in-out-power2: cubic-bezier(.645, .045, .355, 1);
      // --ease-in-power3: cubic-bezier(.895, .03, .685, .22);
      // --ease-out-power3: cubic-bezier(.165, .84, .44, 1);
      // --ease-in-out-power3: cubic-bezier(.77, 0, .175, 1);
      // --ease-in-power4: cubic-bezier(.755, .05, .855, .06);
      // --ease-out-power4: cubic-bezier(.23, 1, .32, 1);
      // --ease-in-out-power4: cubic-bezier(.86, 0, .07, 1);
      // --ease-in-circ: cubic-bezier(.6, .04, .98, .335);
      // --ease-out-circ: cubic-bezier(.075, .82, .165, 1);
      // --ease-in-out-circ: cubic-bezier(.785, .135, .15, .86);
      // --ease-in-expo: cubic-bezier(.95, .05, .795, .035);
      // --ease-out-expo: cubic-bezier(.19, 1, .22, 1);
      // --ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
      // --ease-in-sine: cubic-bezier(.47, 0, .745, .715);
      // --ease-out-sine: cubic-bezier(.39, .575, .565, 1);
      // --ease-in-out-sine: cubic-bezier(.445, .05, .55, .95);
      // --ease-in-back: cubic-bezier(.6, -.28, .735, .045);
      // --ease-out-back: cubic-bezier(.175, .885, .32, 1.275);
      // --ease-in-out-back: cubic-bezier(.68, -.55, .265, 1.55);
      // --ease-bounce: cubic-bezier(.47, 1.64, .41, .8);
      // --ease-out-bounce: cubic-bezier(.17, .67, .3, 1.33);
      // --ease-out: cubic-bezier(.37, .31, 0, 1);
      // --ease-out-swift: cubic-bezier(.55, 0, .1, 1);
      // --ease-smooth-out: cubic-bezier(.4, 0, 0, 1);
      // --ease-smooth-in-out: cubic-bezier(.75, 0, .25, 1);
      // --ease-out-gentle: cubic-bezier(.17, 1.38, .35, .96);
            
      --transition-drawer-in: transform 600ms cubic-bezier(0.34, 0.38, 0, 1);
      --transition-drawer-out: transform 450ms cubic-bezier(0.51, 0.22, 0.12, 1);
      --transition-backdrop-in: opacity 450ms cubic-bezier(0.48, 0.19, 0.15, 0.8);
      --transition-backdrop-out: opacity 400ms cubic-bezier(0.42, 0, 0.51, 0.79);
  
      // Set these as CSS variables so they can be adjusted via inline styling or modifier classes if necessary
      --lazy-image-transition-timing-function: cubic-bezier(0.42, 0.33, 0.21, 0.82);
      --lazy-image-transition-duration: 0.32s;
      --lazy-image-transition: opacity var(--lazy-image-transition-timing-function, ease-in) var(--lazy-image-transition-duration, 0.25s);    

      --backdrop-color: #000;
      --backdrop-opacity: 0.6;      
  
      --header-height: 65px;
      --header-logo-width: 110px;
  
      @media (min-width: $bp-xl) {
        --header-logo-width: 140px;
      }
    }
  }
}

@layer base {
  :focus,
  :focus-visible {
    @apply outline-none; // Applies outline-width and offset
  }
    
  html {
    scroll-padding-top: calc(var(--header-height) + 20px);

    &:not(.is-theme-editor) {
      scroll-behavior: smooth;
    }
  }

  body {
    @apply font-sans font-normal bg-white text-black text-base;

    text-rendering: optimizeLegibility;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  }  

  html.js {
    @media (prefers-reduced-motion: no-preference) {
      body {
        opacity: 0;
        transition: opacity 0.5s cubic-bezier(0.33, 0.01, 0.49, 1.02) 0.15s;
      
        &.is-loaded {
          opacity: 1;
        }
      }
    }
  }

  // Only show when JS is not supported
  .no-js:not(html) {
    display: none;

    .no-js & {
      display: block;
    }
  }

  // Only show when JS is supported
  .js {
    .no-js & {
      display: none;
    }
  }
  
  a, button {
    &:focus-visible:not(:has([disabled])) {
      @apply outline outline-blue;
    }
  }  
}

body.ajax-cart-open,
body.drawer-open {
  @apply overflow-hidden;
}
